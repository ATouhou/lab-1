// Cameron Palmer
// Assignment 2
// September 24, 2006

1)
2/N, 37, N^(1/2), N log log N, N, N log N, N log^2 N, N log(N^2), 
2^(N/2), N^(1.5), N^2 log N, N^2, N^3, 2^N

Grow at the same rate:
N^2 log N and N^2

2)
N^((1+e)/(log N)^(1/2))

3)
3.1.a)
O(N)
3.1.b)

3.1.c)

3.2.a)
3.2.b)
3.2.c)

3.3.a)
3.3.b)
3.3.c)

3.4.a)
3.4.b)
3.4.c)

3.5.a)
3.5.b)
3.5.c)

3.6.a)
3.6.b)
3.6.c)

4)

5)

6)

7)

Problem 8) Fibonacci iterative and recursive versions
I provide two shell scripts that automatically call the program with the
required values. 1, 2, 4, 8, 16, 32, 64

Fibonacci1.cpp Iterative version:
Fibonacci number 1 is 1 in 0 seconds.
Fibonacci number 2 is 1 in 0 seconds.
Fibonacci number 4 is 3 in 0 seconds.
Fibonacci number 8 is 21 in 0 seconds.
Fibonacci number 16 is 987 in 0 seconds.
Fibonacci number 32 is 2178309 in 0 seconds.
Fibonacci number 64 is 1640636603 in 0 seconds.

Fibonacci2.cpp Recursive version:
Fibonacci number 1 is 1 in 0 seconds.
Fibonacci number 2 is 1 in 0 seconds.
Fibonacci number 4 is 3 in 0 seconds.
Fibonacci number 8 is 21 in 0 seconds.
Fibonacci number 16 is 987 in 0 seconds.
Fibonacci number 32 is 2178309 in 0.06 seconds.
Fibonacci number 64 failed to finish.

Since each call to the recursive function will require 2^n the calls, the 
program will not complete when given 64 as an input.

9)
See attached

10)
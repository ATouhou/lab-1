Cameron L Palmer
CSCE 2610
February 5, 2006

Chapter 2 - 2.3, 2.4, 2.6, 2.15, 2.29

2.3) CAFE FACE

2.4) It is not the common case

2.6)
srl $t0, $t3, 5
andi $t0, $t0, 00001FFFF

2.15)
# Cameron L Palmer
# CSCE 2610 - Computer Organization
# Problem 2.15
#
# int i;
# void set_array(int num)
# {
#  int array[10]
#  for(i=0; i<10; i++) 
#  {
#        array[i] = compare(num, i)
#  }
# }
# int compare(int a, int b)
# {
#  if (sub(a, b) >= 0)
#     return 1;
#  else
#     return 0;
# }
# int sub (int a, int b)
# {
#     return a-b;
# }

array: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

##### SET_ARRAY PROCEDURE

set_array:
   # Accepts int num and stores in $s0
   # Save the $s0 and $ra registers on the stack
   addi $sp, $sp, -52 # move stack pointer
   sw $fp, 48($sp) # Save frame pointer
   sw $ra, 44($sp) # Save return address
   sw $a0, 40($sp) # Save parameter (num)
   addi $fp, $sp, 48 # establish frame pointer
      
   # Move the setup the loop
   addi $s1, $zero, 10
   add $s0, $zero, $zero # i variable
   la $s2, array

forloop:
   slt $t0, $s0, $s1 
   beq $t0, $zero, exit
   
   add $a1, $zero, $s0
   jal compare
   
   sll $t1, $s0, 2
   add $t1, $s2, $t1
   sw $v0, 0($t1)
   
   addi $s0, $s0, 1
   j forloop
      
end_set_array:   
   lw $s2, 12($sp)
   lw $s1, 8($sp)
   lw $s0, 4($sp)
   lw $ra, 0($sp)
   addi $sp, $sp, 16
   jr $ra
   
##### END SET_ARRAY

##### COMPARE PROCEDURE

compare:
   # Save $ra
   addi $sp, $sp, -4
   sw $ra, 0($sp)
   
   jal sub

   # If-then-else
   # If $v0 < zero, goto else
   slt $t0, $v0, $zero
   bne $v0, $zero, else
   addi $v0, $zero, 1
   j end_compare
   
else:
   add $v0, $zero, $zero

end_compare:
   # Restore $ra
   lw $ra, 0($sp)
   addi $sp, $sp, 4
   
   jr $ra

##### END COMPARE

##### SUB PROCEDURE

sub:
   sub $v0, $a0, $a1
   jr $ra
   
##### END SUB
   
   
2.29)

# Comment this code and describe what it does

   add $t0, $zero, $zero # Initialize $t0 to zero
loop: # while loop count down from $a1 to zero
   beq $a1, $zero, finish # compare value in $a1 to zero and if equal exit
   add $t0, $t0, $a0 # add the value passed in $a0 to the $t0 value, store in $t0
   sub $a1, $a1, 1 # Subtract one from the loop counter $a1
   j loop # Jump back to the top of the loop
finish:
   addi $t0, $t0, 100 # Add 100 (4 dec) to the value in $t0
   add $v0, $t0, $zero # Move the value in $t0 to the $v0 return register
   
Essentially this implements a while loop as it might be done when located within
a leaf procedure.
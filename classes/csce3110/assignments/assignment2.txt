// Cameron Palmer
// Assignment 2
// September 24, 2006

1)
37, 2/N, N^(1/2), N log log N, N, N log N, N log^2 N, N log(N^2), 
2^(N/2), N^(1.5), N^2 log N, N^2, N^3, 2^N

Grow at the same rate:
N^2 log N and N^2
N log N and N log^2 N

2)
N^((1+e)/(log N)^(1/2))

3)
3.1.a)
O(N)
3.1.b)
See attached
3.1.c)
same

3.2.a)
O(N^2)
3.2.b)
See attached
3.2.c)
same

3.3.a)
O(N^3)
3.3.b)
See attached
3.3.c)
same

3.4.a)
O(N^2)
3.4.b)
See attached
3.4.c)
much lower

3.5.a)
O(N^4)
3.5.b)
See attached
3.5.c)
lower

3.6.a)
O(N^4)
3.6.b)
See attached
3.6.c)
lower

4)
An algorithm takes .5ms for input size 100. How large a problem can be solved in
1 min if the running time is the following (assume low order terms are negligible)?
a. 12 million
b. 3656808

(I used python to get the result)
from math import log10
n=1
x=0
while x <= 24000000
   n=n+1
   x=n*log10(n)
print n

c. sqrt(12)*10^4 or 34641
d. 4932

5)
Prime checker - see attached program in folder 02_prime/
b. The program will run in O(sqrt(N)) time.
c. ceil(log_2(N))
d. O(log_2(sqrt(N)))
e. The are the same on the tested computer. 0 seconds. BTW I had to use an opteron
server to test it with a 40-bit number.
f. N is more reasonable. B is typically harder to calculate and a lot larger.

6)
Infix Calculator - see attached programs
02_infix_to_postfix/
02_postfix_to_infix/

7)
Self adjusting list - see attached programs
02_array_adjusting_list/
02_adjusting_list/
c) It is reasonable that more popular items will stay towards the front since
popular items will be refreshed to the front as they are accessed and items that
receive few accesses will sink to the bottom.

Problem 8) Fibonacci iterative and recursive versions - see attached programs
02_fibonacci/
I provide two shell scripts that automatically call the program with the
required values. 1, 2, 4, 8, 16, 32, 64

Fibonacci1.cpp Iterative version:
Fibonacci number 1 is 1 in 0 seconds.
Fibonacci number 2 is 1 in 0 seconds.
Fibonacci number 4 is 3 in 0 seconds.
Fibonacci number 8 is 21 in 0 seconds.
Fibonacci number 16 is 987 in 0 seconds.
Fibonacci number 32 is 2178309 in 0 seconds.
Fibonacci number 64 is 1640636603 in 0 seconds.

Fibonacci2.cpp Recursive version:
Fibonacci number 1 is 1 in 0 seconds.
Fibonacci number 2 is 1 in 0 seconds.
Fibonacci number 4 is 3 in 0 seconds.
Fibonacci number 8 is 21 in 0 seconds.
Fibonacci number 16 is 987 in 0 seconds.
Fibonacci number 32 is 2178309 in 0.06 seconds.
Fibonacci number 64 failed to finish.

Since each call to the recursive function will require 2^n the calls, the 
program will not complete when given 64 as an input.

9)
Doubly linked list - See attached program
02_linklist/

10)
a. Sum N = n(n+1) / 2
b. n^2(1+(1/2)+(1/4)+...) or 2n^2
/home/palmerc/Development/nakajima/newsim/src/newsim -dir /home/palmerc/Development/nakajima/newsim/data/vortex -sim_type sp -fastfwd 100000000 -sp_sequential -statistic -updrive /bin/sh -c '/home/palmerc/Development/nakajima/newsim/SS/sim-bpred -redir:prog /home/palmerc/Development/nakajima/newsim/log/vortex/prog -redir:sim /home/palmerc/Development/nakajima/newsim/log/vortex/sim /home/palmerc/Development/nakajima/newsim/ss_precompiled_spec/vortex.ss vortex.in'

# set dir: /home/palmerc/Development/nakajima/newsim/data/vortex/

$ ------Sim_Model::print_argment()-----
$ <04/02/12 16:08:12>	 ADD: MD predict, FIXED: setjmp/longjmp, unroll
$            FIX: 
$ NO REEXEC MODE
$ trace limit: 100000000
$ print freq: 1000000
$ func_call_inline
$ loop unroll
$ perfect disambiguate (SP_REG, GP_REG)
$ 2lev brn_pred
$ simulation type: sp
$ print statistic
$ SP sequential
$ reg perfect
$ -------------------------------------

# Program_Info::file_read() init end
$ Branch_Predict::allocate() pa_i:15, pa_j:15, pa_k:2
# Brnach_Predict::allocate() allocate BHT PHT end
# Loop::allocate_loop_c() init end
# Loop::file_read() init end
# Func_Stack::init_trace_skip() 100000000 .................... skip end

@ TC 1000000 cycle: 136476 ipc: 6.54646
@ TC 2000000 cycle: 272241 ipc: 6.55989
@ TC 3000000 cycle: 410990 ipc: 6.5137
@ TC 4000000 cycle: 543154 ipc: 6.57398
@ TC 5000000 cycle: 677147 ipc: 6.5917
@ TC 6000000 cycle: 810606 ipc: 6.60778
@ TC 7000000 cycle: 948264 ipc: 6.58909
@ TC 8000000 cycle: 1075586 ipc: 6.64105
@ TC 9000000 cycle: 1208047 ipc: 6.65235
@ TC 10000000 cycle: 1345054 ipc: 6.63789
@ TC 11000000 cycle: 1474269 ipc: 6.66311
@ TC 12000000 cycle: 1614794 ipc: 6.63448
@ TC 13000000 cycle: 1745799 ipc: 6.6485
@ TC 14000000 cycle: 1879099 ipc: 6.65212
@ TC 15000000 cycle: 2014223 ipc: 6.64893
@ TC 16000000 cycle: 2147769 ipc: 6.65123
@ TC 17000000 cycle: 2284673 ipc: 6.6431
@ TC 18000000 cycle: 2415365 ipc: 6.65391
@ TC 19000000 cycle: 2547236 ipc: 6.66021
@ TC 20000000 cycle: 2681114 ipc: 6.66057
@ TC 21000000 cycle: 2816143 ipc: 6.65795
@ TC 22000000 cycle: 2951001 ipc: 6.65611
@ TC 23000000 cycle: 3093341 ipc: 6.63748
@ TC 24000000 cycle: 3230877 ipc: 6.63095
@ TC 25000000 cycle: 3366384 ipc: 6.62895
@ TC 26000000 cycle: 3503633 ipc: 6.62373
@ TC 27000000 cycle: 3633608 ipc: 6.63284
@ TC 28000000 cycle: 3770405 ipc: 6.62863
@ TC 29000000 cycle: 3900465 ipc: 6.63683
@ TC 30000000 cycle: 4035841 ipc: 6.6353
@ TC 31000000 cycle: 4172760 ipc: 6.63107
@ TC 32000000 cycle: 4305939 ipc: 6.63327
@ TC 33000000 cycle: 4439783 ipc: 6.63444
@ TC 34000000 cycle: 4570100 ipc: 6.64097
@ TC 35000000 cycle: 4705547 ipc: 6.63942
@ TC 36000000 cycle: 4839681 ipc: 6.63983
@ TC 37000000 cycle: 4973719 ipc: 6.64043
@ TC 38000000 cycle: 5107929 ipc: 6.64066
@ TC 39000000 cycle: 5241728 ipc: 6.64144
@ TC 40000000 cycle: 5377279 ipc: 6.63988
@ TC 41000000 cycle: 5515263 ipc: 6.63538
@ TC 42000000 cycle: 5646165 ipc: 6.63979
@ TC 43000000 cycle: 5782195 ipc: 6.63784
@ TC 44000000 cycle: 5909683 ipc: 6.64601
@ TC 45000000 cycle: 6041199 ipc: 6.64925
@ TC 46000000 cycle: 6173165 ipc: 6.65176
@ TC 47000000 cycle: 6307376 ipc: 6.65173
@ TC 48000000 cycle: 6443998 ipc: 6.64906
@ TC 49000000 cycle: 6580279 ipc: 6.64682
@ TC 50000000 cycle: 6713080 ipc: 6.64829
@ TC 51000000 cycle: 6846960 ipc: 6.64861
@ TC 52000000 cycle: 6981615 ipc: 6.64812
@ TC 53000000 cycle: 7115377 ipc: 6.64858
@ TC 54000000 cycle: 7248556 ipc: 6.64962
@ TC 55000000 cycle: 7384218 ipc: 6.64817
@ TC 56000000 cycle: 7516333 ipc: 6.65018
@ TC 57000000 cycle: 7653706 ipc: 6.64725
@ TC 58000000 cycle: 7787717 ipc: 6.64744
@ TC 59000000 cycle: 7926801 ipc: 6.64318
@ TC 60000000 cycle: 8056704 ipc: 6.64699
@ TC 61000000 cycle: 8192367 ipc: 6.64573
@ TC 62000000 cycle: 8321997 ipc: 6.64957
@ TC 63000000 cycle: 8454508 ipc: 6.65093
@ TC 64000000 cycle: 8584283 ipc: 6.65452
@ TC 65000000 cycle: 8712460 ipc: 6.65922
@ TC 66000000 cycle: 8844440 ipc: 6.66083
@ TC 67000000 cycle: 8977102 ipc: 6.66191
@ TC 68000000 cycle: 9108589 ipc: 6.66384
@ TC 69000000 cycle: 9241833 ipc: 6.66432
@ TC 70000000 cycle: 9373210 ipc: 6.66617
@ TC 71000000 cycle: 9504722 ipc: 6.66787
@ TC 72000000 cycle: 9637442 ipc: 6.66863
@ TC 73000000 cycle: 9771165 ipc: 6.66873
@ TC 74000000 cycle: 9901993 ipc: 6.67084
@ TC 75000000 cycle: 10033227 ipc: 6.67253
@ TC 76000000 cycle: 10165590 ipc: 6.67352
@ TC 77000000 cycle: 10302157 ipc: 6.67153
@ TC 78000000 cycle: 10435321 ipc: 6.67187
@ TC 79000000 cycle: 10567004 ipc: 6.67321
@ TC 80000000 cycle: 10701824 ipc: 6.67254
@ TC 81000000 cycle: 10828713 ipc: 6.67699
@ TC 82000000 cycle: 10956743 ipc: 6.68057
@ TC 83000000 cycle: 11085957 ipc: 6.68328
@ TC 84000000 cycle: 11215540 ipc: 6.6857
@ TC 85000000 cycle: 11351121 ipc: 6.68447
@ TC 86000000 cycle: 11485802 ipc: 6.68376
@ TC 87000000 cycle: 11616392 ipc: 6.68555
@ TC 88000000 cycle: 11751464 ipc: 6.68464
@ TC 89000000 cycle: 11882006 ipc: 6.68636
@ TC 90000000 cycle: 12018185 ipc: 6.6848
@ TC 91000000 cycle: 12146494 ipc: 6.68782
@ TC 92000000 cycle: 12278029 ipc: 6.6889
@ TC 93000000 cycle: 12417007 ipc: 6.68575
@ TC 94000000 cycle: 12553973 ipc: 6.68374
@ TC 95000000 cycle: 12687327 ipc: 6.68381
@ TC 96000000 cycle: 12823039 ipc: 6.68264
@ TC 97000000 cycle: 12955516 ipc: 6.68321
@ TC 98000000 cycle: 13093513 ipc: 6.68078
@ TC 99000000 cycle: 13226062 ipc: 6.68135
@ TC 100000000 cycle: 13357751 ipc: 6.68231
# Re_Exec::check_mode() trace lim :100000000

# print_result_data()
trace count         : 100000000
 nop count          : 0
 call/return count  : 4068327
 con branch count   : 11476601
 other branch count : 337968
 load count         : 29258270
 store count        : 24435613
 other count        : 30423221
inst (trace - nop)  : 100000000

<func inline>
 inline call count  : 2034161
 inline return count: 2034166
 inline other count : 3988345

<perfect memory disambiguate (SP_REG, GP_REG)>
 sp load count      : 14228100
 sp store count     : 15792657
 gp load count      : 2700487
 gp store count     : 2685046

<loop unroll>
 loop unroll branch : 708673
 loop induction val : 1974035
 (loop const val    : 173384 )
#fbb: 93/7 -> bedge, header, ave: 0, 1110, 1
#fbb: 389/6 -> bedge, header, ave: 6326, 3163, 3
#fbb: 752/149 -> bedge, header, ave: 0, 1573, 1
#fbb: 801/3 -> bedge, header, ave: 5413, 694, 8.79971
#fbb: 801/12 -> bedge, header, ave: 0, 5413, 1
#fbb: 801/63 -> bedge, header, ave: 278, 139, 3
#fbb: 804/22 -> bedge, header, ave: 7213, 971, 8.42842
#fbb: 805/22 -> bedge, header, ave: 1946, 278, 8
#fbb: 823/19 -> bedge, header, ave: 309, 36, 9.58333
#fbb: 823/22 -> bedge, header, ave: 273, 36, 8.58333
#fbb: 823/35 -> bedge, header, ave: 119, 36, 4.30556
#fbb: 823/39 -> bedge, header, ave: 118, 36, 4.27778
#fbb: 823/43 -> bedge, header, ave: 118, 36, 4.27778
#fbb: 823/69 -> bedge, header, ave: 1516, 125, 13.128
#fbb: 830/14 -> bedge, header, ave: 54, 9, 7
#fbb: 830/23 -> bedge, header, ave: 45, 9, 6
#fbb: 830/36 -> bedge, header, ave: 18, 9, 3
#fbb: 830/40 -> bedge, header, ave: 18, 9, 3
#fbb: 830/44 -> bedge, header, ave: 18, 9, 3
#fbb: 830/47 -> bedge, header, ave: 27, 9, 4
#fbb: 831/18 -> bedge, header, ave: 6264, 4804, 2.30391
#fbb: 832/17 -> bedge, header, ave: 576, 123, 5.68293
#fbb: 842/39 -> bedge, header, ave: 6, 4, 2.5
#fbb: 871/3 -> bedge, header, ave: 292, 139, 3.10072
#fbb: 871/9 -> bedge, header, ave: 20, 139, 1.14388
#fbb: 874/13 -> bedge, header, ave: 528, 1025, 1.51512
====
 dynamic loop num   : 4.63963 (sum_ave/num: 120.63/26)
 loop num (weighted): 2.57996
max loop ave: 13.128
====
#fbb: 934/1 -> bedge, header, ave: 11123, 1527, 8.28422
#fbb: 940/4 -> bedge, header, ave: 50, 279, 1.17921
#fbb: 944/2 -> bedge, header, ave: 1, 1, 2
#fbb: 944/9 -> bedge, header, ave: 120505, 32455, 4.71299
#fbb: 957/5 -> bedge, header, ave: 509490, 29045, 18.5414
#fbb: 957/7 -> bedge, header, ave: 3, 1, 4
#fbb: 970/37 -> bedge, header, ave: 21, 4, 6.25
#fbb: 970/72 -> bedge, header, ave: 0, 3, 1
#fbb: 970/132 -> bedge, header, ave: 6, 3, 3
#fbb: 970/203 -> bedge, header, ave: 6, 3, 3
#fbb: 995/10 -> bedge, header, ave: 29386, 5963, 5.92806
#fbb: 995/23 -> bedge, header, ave: 5470, 216, 26.3241
#fbb: 995/31 -> bedge, header, ave: 0, 268, 1
#fbb: 1005/1 -> bedge, header, ave: 4, 2, 3
#fbb: 1005/5 -> bedge, header, ave: 3, 5, 1.6
#fbb: 1018/48 -> bedge, header, ave: 0, 1, 1
#fbb: 1018/49 -> bedge, header, ave: 0, 1, 1
 dynamic loop num   : 4.94071 (sum_ave/num: 212.45/43)
 loop num (weighted): 8.88714

instance count      : 89260620
clock cycle         : 13357751
<branch predict>
branch prediction : 98.2387 (10578274/10767928)
ipc (instance/clock): 6.68231

# Bb_Statistic::print() statistic
return 0

Cameron Palmer
CSCE 3600

YSH. Works like any other shell, you type things and they run. However at
this time not much is working. The .ysh_profile has the option to set your
path and the look of the prompt.

When you type a command, any command, it will search your current path unless
it is proceeded by a '.' or a '/', in which case it will assume you are
providing an absolute path.

I am probably well short of the 25% you set out because I spent time trying
to be too ambitious.

The design goals for my project were to learn C to a reasonable degree of
competency so that this summer I can port the linux HFS driver to windows. I
also wanted to provide more of a real shell. 

Goals:
Read configuration file (accomplished)
Correctly parse the command line into string tokens (accomplished)
Support any command and options via exec (accomplished)
Support a configurable PATH environment and don't rely on execvp or lp (accompolished)
Provide pipe funtionality and redirection (not working)
Provide shell expansions and ~ (not working)
Support BASH commands (not working)
Hack ps and top to monitor the processes within the shell (not working)
Foreground and Background jobs (not working)

Discussion of non-working items
Directory movement can be handled by capturing cd and then translating it to
unix system call.

The pipe() call is how I planned on handling redirection of the exec'd
processes. I need to create a pipe {pipe()} then fcntl() the file descriptors 
with F_SETFD to FD_CLOEXEC.  Then fork() the sender. In the sender process dup 
the write FD from the pipe to STDOUT and all the exec.  In parent, fork() the 
receiver. In the receiver, process dup the read FD of the pipe to STDIN and 
exec() the reader. 

Shell expansions and bash command I plan to handle by using
execl("/bin/sh", "-c", commandline, (char *)0); This will allow me to translate
the syntax you provided into BASH and then just hand it a complete program.
The problem with this system is that it requires that bash programs be
completed in one line, or I would need to require something like a '\' to make
multiline work. I could also use bash to translate * and ~ for me. As we
touched on in your office I would need to really create a interpreter instead
of a command line tokenizer to do this on my own. I think BASH uses yacc.

I am in the process (no pun) of developing a method of the parent keeping a
dynamic list of children. Once I have that I can simply call the ps and top
commands with a list of children to display.  

Foreground and Background process will be a natural progression from keeping 
track of the children. This is the part I have thought about the least though.
My gut reaction is to use waitpid with nohang for processes that are
backgrounded and wait for the process in the foreground. Although I am tempted
to look and see how korn shell or bash handles this. It seems like there is a
really slick solution but I haven't figured it out yet.

Finally I would like to say I have learned more from this project than anything
all semester long in my other classes. I hope to finish this in the next couple
of weeks and will send you the results.


Best regards,

Cameron. 

